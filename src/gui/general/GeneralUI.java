package gui.general;

import gui.general.componentModels.ConditionTableModel;
import gui.general.componentModels.SysObjectTreeModel;
import gui.general.componentModels.WorldListModel;
import java.io.File;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import model.Action;
import model.Condition;
import model.ObjectObservation;
import model.ObjectProperty;
import model.SysObject;
import model.World;
import model.exceptions.DuplicateElementException;

/**
 *
 * @author Paul Givel and Guillaume Hartenstein
 */
public class GeneralUI extends javax.swing.JFrame {
    private final String frameTitle = "World creator - ";
    
    private SysObject _object;
    private ObjectProperty _property;
    private String _propValue;
    private Action _action;
    private Condition _preCond;
    private Condition _postCond;
    private ObjectObservation _objectObs;
    private int _instant;
                            
    private final World world;
    
    private File lastSaveFile;
    private final JFileChooser xmlChooser;
    
    /**
     * Creates new form GeneralUI
     * @param world The world to work on
     */
    public GeneralUI(World world) {
        this.world = world;
   
        xmlChooser = new JFileChooser();
        xmlChooser.setFileFilter(new FileNameExtensionFilter("XML files", "xml"));
        
        initComponents();
        
        treeObjects.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        
        tablePreCond.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                tablePreCondValueChanged(e);
            }
        });
        
        tablePostCond.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                tablePostCondValueChanged(e);
            }
        });
        
        super.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        splitTabObjects = new javax.swing.JSplitPane();
        panelStates = new javax.swing.JPanel();
        scrollListProp = new javax.swing.JScrollPane();
        listProperties = new javax.swing.JList<>();
        panelBtnStates = new javax.swing.JPanel();
        btnAddValue = new javax.swing.JButton();
        btnRemProperty = new javax.swing.JButton();
        panelObjects = new javax.swing.JPanel();
        scrollPaneObjects = new javax.swing.JScrollPane();
        treeObjects = new javax.swing.JTree();
        panelBtnObjects = new javax.swing.JPanel();
        btnAddObject = new javax.swing.JButton();
        btnAddProp = new javax.swing.JButton();
        btnRemObject = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        splitActionTab = new javax.swing.JSplitPane();
        panelLaws = new javax.swing.JPanel();
        panelPre = new javax.swing.JPanel();
        scrollTablePre = new javax.swing.JScrollPane();
        tablePreCond = new javax.swing.JTable();
        panelBtnPre = new javax.swing.JPanel();
        btnAddPre = new javax.swing.JButton();
        btnRemPre = new javax.swing.JButton();
        panelPost = new javax.swing.JPanel();
        scrollTablePost = new javax.swing.JScrollPane();
        tablePostCond = new javax.swing.JTable();
        panelBtnPost = new javax.swing.JPanel();
        btnAddPost = new javax.swing.JButton();
        btnRemPost = new javax.swing.JButton();
        panelActions = new javax.swing.JPanel();
        scrollListActions = new javax.swing.JScrollPane();
        listActions = new javax.swing.JList<>();
        panelBtnActions = new javax.swing.JPanel();
        btnAddAction = new javax.swing.JButton();
        btnRemAction = new javax.swing.JButton();
        panelObservations = new javax.swing.JPanel();
        sliderInstant = new javax.swing.JSlider();
        panelObservation = new javax.swing.JPanel();
        scrollTableObservation = new javax.swing.JScrollPane();
        tableObservation = new javax.swing.JTable();
        panelBtnObservation = new javax.swing.JPanel();
        btnAddObservation = new javax.swing.JButton();
        btnRemObservation = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        miOpen = new javax.swing.JMenuItem();
        miSave = new javax.swing.JMenuItem();
        miSaveAs = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        miExit = new javax.swing.JMenuItem();
        menuWorld = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(frameTitle);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        splitTabObjects.setDividerLocation(270);

        panelStates.setLayout(new java.awt.BorderLayout());

        listProperties.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Possible values", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16))); // NOI18N
        listProperties.setOpaque(false);
        listProperties.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listPropertiesValueChanged(evt);
            }
        });
        scrollListProp.setViewportView(listProperties);

        panelStates.add(scrollListProp, java.awt.BorderLayout.CENTER);

        btnAddValue.setText("Add");
        btnAddValue.setEnabled(false);
        btnAddValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddValueActionPerformed(evt);
            }
        });
        panelBtnStates.add(btnAddValue);

        btnRemProperty.setText("Remove");
        btnRemProperty.setEnabled(false);
        btnRemProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemPropertyActionPerformed(evt);
            }
        });
        panelBtnStates.add(btnRemProperty);

        panelStates.add(panelBtnStates, java.awt.BorderLayout.PAGE_END);

        splitTabObjects.setRightComponent(panelStates);

        panelObjects.setLayout(new java.awt.BorderLayout());

        treeObjects.setModel(new SysObjectTreeModel(world.getObjects()));
        treeObjects.setOpaque(false);
        treeObjects.setRootVisible(false);
        treeObjects.setShowsRootHandles(true);
        treeObjects.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeObjectsValueChanged(evt);
            }
        });
        scrollPaneObjects.setViewportView(treeObjects);

        panelObjects.add(scrollPaneObjects, java.awt.BorderLayout.CENTER);

        btnAddObject.setText("Add object");
        btnAddObject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddObjectActionPerformed(evt);
            }
        });
        panelBtnObjects.add(btnAddObject);

        btnAddProp.setText("Add property");
        btnAddProp.setEnabled(false);
        btnAddProp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPropActionPerformed(evt);
            }
        });
        panelBtnObjects.add(btnAddProp);

        btnRemObject.setText("Remove");
        btnRemObject.setEnabled(false);
        btnRemObject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemObjectActionPerformed(evt);
            }
        });
        panelBtnObjects.add(btnRemObject);

        panelObjects.add(panelBtnObjects, java.awt.BorderLayout.PAGE_END);
        panelObjects.add(jSeparator1, java.awt.BorderLayout.PAGE_START);

        splitTabObjects.setLeftComponent(panelObjects);

        tabbedPane.addTab("Objects", splitTabObjects);

        splitActionTab.setDividerLocation(150);

        panelLaws.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Action laws", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16))); // NOI18N
        panelLaws.setLayout(new java.awt.GridLayout(2, 1));

        panelPre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pre-conditions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        panelPre.setLayout(new java.awt.BorderLayout());

        tablePreCond.setModel(new DefaultTableModel());
        tablePreCond.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablePreCond.getTableHeader().setReorderingAllowed(false);
        scrollTablePre.setViewportView(tablePreCond);

        panelPre.add(scrollTablePre, java.awt.BorderLayout.CENTER);

        btnAddPre.setText("Add");
        btnAddPre.setEnabled(false);
        btnAddPre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPreActionPerformed(evt);
            }
        });
        panelBtnPre.add(btnAddPre);

        btnRemPre.setText("Remove");
        btnRemPre.setEnabled(false);
        btnRemPre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemPreActionPerformed(evt);
            }
        });
        panelBtnPre.add(btnRemPre);

        panelPre.add(panelBtnPre, java.awt.BorderLayout.SOUTH);

        panelLaws.add(panelPre);

        panelPost.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Post-conditions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        panelPost.setLayout(new java.awt.BorderLayout());

        tablePostCond.setModel(new DefaultTableModel());
        tablePostCond.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablePostCond.getTableHeader().setReorderingAllowed(false);
        scrollTablePost.setViewportView(tablePostCond);

        panelPost.add(scrollTablePost, java.awt.BorderLayout.CENTER);

        btnAddPost.setText("Add");
        btnAddPost.setEnabled(false);
        btnAddPost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPostActionPerformed(evt);
            }
        });
        panelBtnPost.add(btnAddPost);

        btnRemPost.setText("Remove");
        btnRemPost.setEnabled(false);
        btnRemPost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemPostActionPerformed(evt);
            }
        });
        panelBtnPost.add(btnRemPost);

        panelPost.add(panelBtnPost, java.awt.BorderLayout.SOUTH);

        panelLaws.add(panelPost);

        splitActionTab.setRightComponent(panelLaws);

        panelActions.setLayout(new java.awt.BorderLayout());

        listActions.setModel(new WorldListModel(world.getPossibleActions())
        );
        listActions.setOpaque(false);
        listActions.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listActionsValueChanged(evt);
            }
        });
        scrollListActions.setViewportView(listActions);

        panelActions.add(scrollListActions, java.awt.BorderLayout.CENTER);

        btnAddAction.setText("Add");
        btnAddAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionActionPerformed(evt);
            }
        });
        panelBtnActions.add(btnAddAction);

        btnRemAction.setText("Remove");
        btnRemAction.setEnabled(false);
        btnRemAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemActionActionPerformed(evt);
            }
        });
        panelBtnActions.add(btnRemAction);

        panelActions.add(panelBtnActions, java.awt.BorderLayout.PAGE_END);

        splitActionTab.setLeftComponent(panelActions);

        tabbedPane.addTab("Actions", splitActionTab);

        panelObservations.setLayout(new java.awt.BorderLayout());

        sliderInstant.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sliderInstant.setMaximum(world.getObservations().size()-1);
        sliderInstant.setPaintLabels(true);
        sliderInstant.setPaintTicks(true);
        sliderInstant.setSnapToTicks(true);
        sliderInstant.setToolTipText("");
        sliderInstant.setValue(0);
        sliderInstant.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Instant", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        panelObservations.add(sliderInstant, java.awt.BorderLayout.NORTH);

        panelObservation.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Observation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        panelObservation.setLayout(new java.awt.BorderLayout());

        tableObservation.setModel(new DefaultTableModel());
        tableObservation.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableObservation.getTableHeader().setReorderingAllowed(false);
        scrollTableObservation.setViewportView(tableObservation);

        panelObservation.add(scrollTableObservation, java.awt.BorderLayout.CENTER);

        btnAddObservation.setText("Add");
        panelBtnObservation.add(btnAddObservation);

        btnRemObservation.setText("Remove");
        btnRemObservation.setEnabled(false);
        panelBtnObservation.add(btnRemObservation);

        panelObservation.add(panelBtnObservation, java.awt.BorderLayout.SOUTH);

        panelObservations.add(panelObservation, java.awt.BorderLayout.CENTER);

        tabbedPane.addTab("Observations", panelObservations);

        menuFile.setMnemonic('F');
        menuFile.setText("File");
        menuFile.setToolTipText("");

        miOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        miOpen.setMnemonic('O');
        miOpen.setText("Open");
        miOpen.setToolTipText("Import from XML file");
        miOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenActionPerformed(evt);
            }
        });
        menuFile.add(miOpen);

        miSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        miSave.setMnemonic('S');
        miSave.setText("Save");
        miSave.setToolTipText("Export to XML file");
        miSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveActionPerformed(evt);
            }
        });
        menuFile.add(miSave);

        miSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miSaveAs.setText("Save as");
        miSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveAsActionPerformed(evt);
            }
        });
        menuFile.add(miSaveAs);
        menuFile.add(jSeparator2);

        miExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        miExit.setMnemonic('E');
        miExit.setText("Exit");
        miExit.setToolTipText("Exit the application");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        menuFile.add(miExit);

        menuBar.add(menuFile);

        menuWorld.setMnemonic('W');
        menuWorld.setText("World");
        menuBar.add(menuWorld);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listPropertiesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listPropertiesValueChanged
        _propValue = listProperties.getSelectedValue();
        btnRemProperty.setEnabled(_propValue != null);
    }//GEN-LAST:event_listPropertiesValueChanged

    private void listActionsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listActionsValueChanged
        _action = listActions.getSelectedValue();
        boolean notNull = _action != null;
        
        if(notNull) {
            tablePreCond.setModel(new ConditionTableModel(_action.getPreConditions()));
            tablePostCond.setModel(new ConditionTableModel(_action.getPostConditions()));
        } else {
            tablePreCond.setModel(new DefaultTableModel());
            tablePostCond.setModel(new DefaultTableModel());
        }
        
        btnAddPre.setEnabled(notNull);
        btnAddPost.setEnabled(notNull);
        btnRemAction.setEnabled(notNull);
    }//GEN-LAST:event_listActionsValueChanged

    private void treeObjectsValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeObjectsValueChanged
        Object selected;
        Object parent;
        
        _propValue = null;
        
        try {
            TreePath path = treeObjects.getSelectionPath();
            selected = path.getLastPathComponent();
            parent = path.getParentPath().getLastPathComponent();
            
            // If true, a SysObject has been selected, else it's an ObjectProperty
            boolean isSysObject = selected instanceof SysObject;
        
            if(isSysObject) {
                _object = (SysObject) selected;
                _property = null;
                listProperties.setModel(new DefaultListModel<String>());
            } else {
                _object = (SysObject) parent;
                _property = (ObjectProperty) selected;
                listProperties.setModel(new WorldListModel(_property.getPossibleValues()));
            }
        
            btnRemObject.setEnabled(true);
            btnAddProp.setEnabled(true);
            btnAddValue.setEnabled(!isSysObject);
            
        } catch(NullPointerException e) { // If caught, nothing is selected in the JTree
            _object = null;
            _property = null;
            listProperties.setModel(new DefaultListModel<String>());
            btnRemObject.setEnabled(false);
            btnAddProp.setEnabled(false);
            btnAddValue.setEnabled(false);
        }
    }//GEN-LAST:event_treeObjectsValueChanged

    private void btnRemObjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemObjectActionPerformed
        if(_property != null)
            removeProperty();
        else
            removeObject();
    }//GEN-LAST:event_btnRemObjectActionPerformed

    private void btnRemPropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemPropertyActionPerformed
        String message = "Delete value \""+ _propValue +"\" from property \""+ _property +"\" in object \""+ _object +"\" ?";
        if(confirmation(message, "Confirm deletion") == JOptionPane.YES_OPTION){
            ((WorldListModel)listProperties.getModel()).removeElement(_propValue);
            warnSave();
        }
    }//GEN-LAST:event_btnRemPropertyActionPerformed

    private void btnRemActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemActionActionPerformed
        String message = "Delete action \""+ _action +"\" from world ?";
        if(confirmation(message, "Confirm deletion") == JOptionPane.YES_OPTION){
            ((WorldListModel)listActions.getModel()).removeElement(_action);
            warnSave();
        }
    }//GEN-LAST:event_btnRemActionActionPerformed

    private void btnRemPreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemPreActionPerformed
        String message = "Delete selected pre-condition from action \""+ _action +"\" ?";
        if(confirmation(message, "Confirm deletion") == JOptionPane.YES_OPTION){
            ((ConditionTableModel)tablePreCond.getModel()).removeRow(_preCond);
            warnSave();
        }
    }//GEN-LAST:event_btnRemPreActionPerformed

    private void btnRemPostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemPostActionPerformed
        String message = "Delete selected post-condition from action \""+ _action +"\" ?";
        if(confirmation(message, "Confirm deletion") == JOptionPane.YES_OPTION){
            ((ConditionTableModel)tablePostCond.getModel()).removeRow(_postCond);
            warnSave();
        }
    }//GEN-LAST:event_btnRemPostActionPerformed
    
    private void removeProperty() {
        String message = "Delete property \""+ _property +"\" from object \""+ _object +"\" ?";
        if(confirmation(message, "Confirm deletion") == JOptionPane.YES_OPTION) {
            ((SysObjectTreeModel)treeObjects.getModel()).removeProperty(_object, _property);
            warnSave();
        }
    }

    private void removeObject() {
        String message = "Delete object \""+ _object +"\" from world ?";
        if(confirmation(message, "Confirm deletion") == JOptionPane.YES_OPTION){
            ((SysObjectTreeModel)treeObjects.getModel()).removeObject(_object);
            warnSave();
        }
    }
    
    private void btnAddObjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddObjectActionPerformed
        String name = nameInput("Name of the new object:", "Adding an object");
        if(name != null) {
            try {
                ((SysObjectTreeModel)treeObjects.getModel()).addObject(new SysObject(name, world));
                warnSave();
            } catch (DuplicateElementException e) {
                promptError("The object \""+ name +"\" already exists in the world.", 
                            "Cannot create new object");
            }
        }
    }//GEN-LAST:event_btnAddObjectActionPerformed

    private void btnAddPropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPropActionPerformed
        String message = "Name of the new property for object \""+ _object +"\":";
        String name = nameInput(message, "Adding a property");
        if(name != null) {
            try {
                ((SysObjectTreeModel)treeObjects.getModel()).addProperty(_object, new ObjectProperty(name));
                warnSave();
            } catch (DuplicateElementException e) {
                promptError("The property \""+ name +"\" already exists in object \""+ _object +"\".", 
                            "Cannot create new property");
            }
        }
    }//GEN-LAST:event_btnAddPropActionPerformed

    private void btnAddValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddValueActionPerformed
        String message = "Name of the new value for property \""+ _property +"\" in object \""+ _object +"\":";
        String name = nameInput(message, "Adding a value");
        if(name != null) {
            try {
                ((WorldListModel<String>)listProperties.getModel()).addElement(name);
                warnSave();
            } catch (DuplicateElementException e) {
                promptError("The value \""+ name +"\" already exists in property \""+ _property +"\" of object \""+ _object +"\".", 
                            "Cannot create new value");
            }
        }
    }//GEN-LAST:event_btnAddValueActionPerformed

    private void btnAddActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionActionPerformed
        String name = nameInput("Name of the new action:", "Adding an action");
        if(name != null) {
            try {
                ((WorldListModel<Action>)listActions.getModel()).addElement(new Action(name));
                warnSave();
            } catch (DuplicateElementException e) {
                promptError("The action \""+ name +"\" already exists in the world.", 
                            "Cannot create new action");
            }
        }
    }//GEN-LAST:event_btnAddActionActionPerformed

    private void btnAddPreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPreActionPerformed
        new AddConditionDialog(this, world.getObjects(), _action.getPreConditions()).setVisible(true);
        ((ConditionTableModel)tablePreCond.getModel()).triggerUpdate();
    }//GEN-LAST:event_btnAddPreActionPerformed

    private void btnAddPostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPostActionPerformed
        new AddConditionDialog(this, world.getObjects(), _action.getPostConditions()).setVisible(true);
        ((ConditionTableModel)tablePostCond.getModel()).triggerUpdate();
    }//GEN-LAST:event_btnAddPostActionPerformed

    private void miOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenActionPerformed
        int result = confirmation(
                "Current world will be closed and all unsaved changes will be discarded.\n Continue anyway ?",
                "Open world");
        
        if(result == JOptionPane.YES_OPTION) {
            if(lastSaveFile != null) {
                xmlChooser.setCurrentDirectory(lastSaveFile.getParentFile());
            }
            
            if(xmlChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File file = xmlChooser.getSelectedFile();
                if(isXmlFile(file)) {
                    // TODO use import XML parser
                    newFileLoaded();
                }
            }
        }
    }//GEN-LAST:event_miOpenActionPerformed

    private void miSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveActionPerformed
        if(lastSaveFile == null) {
            miSaveAsActionPerformed(null);
        } else {
           // TODO use XML export parser
           unwarnSave();
        }
    }//GEN-LAST:event_miSaveActionPerformed

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        confirmBeforeClose();
    }//GEN-LAST:event_miExitActionPerformed

    private void miSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveAsActionPerformed
        if(lastSaveFile != null) {
                xmlChooser.setCurrentDirectory(lastSaveFile.getParentFile());
        }
        
        if(xmlChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = xmlChooser.getSelectedFile();
            int result = JOptionPane.YES_OPTION;
            
            if(lastSaveFile.equals(file)) {
                result = confirmation("This file already exists.\n Override ?", "File already exists");
            }
            
            if(result == JOptionPane.YES_OPTION) {
                if(isXmlFile(file)) {
                    // TODO use export XML parser
                    newFileLoaded();
                }
            }
        }
    }//GEN-LAST:event_miSaveAsActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        confirmBeforeClose();
    }//GEN-LAST:event_formWindowClosing

    private void tablePreCondValueChanged(ListSelectionEvent evt) {
        try {
            _preCond = _action.getPreConditions().get(tablePreCond.getSelectedRow());
        } catch (IndexOutOfBoundsException e) {
            _preCond = null;
        }
        btnRemPre.setEnabled(_preCond != null);
    }

    private void tablePostCondValueChanged(ListSelectionEvent evt) {
        try {
            _postCond = _action.getPostConditions().get(tablePostCond.getSelectedRow());
        } catch (IndexOutOfBoundsException e) {
            _postCond = null;
        }
        btnRemPost.setEnabled(_postCond != null);
    }
    
    private int confirmation(String message, String title) {
        return JOptionPane.showConfirmDialog(this, 
                message, 
                title, 
                JOptionPane.YES_NO_OPTION, 
                JOptionPane.WARNING_MESSAGE);
    }
    
    private String nameInput(String message, String title) {
        String name = JOptionPane.showInputDialog(this, message, title, JOptionPane.QUESTION_MESSAGE);
        if(name != null)
            name = name.trim();
        
        while("".equals(name)) {
            name = JOptionPane.showInputDialog(this, "Please enter a valid name:", title, JOptionPane.ERROR_MESSAGE);
            if(name != null)
                name = name.trim();
        }
        
        return name;
    }
    
    private void promptError(String message, String title) {
        JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
    }
    
    private void newFileLoaded() {
        lastSaveFile = xmlChooser.getSelectedFile();
        setTitle(frameTitle+lastSaveFile.getName());
    }
    
    private boolean isXmlFile(File f) {
        if(f.getName().endsWith(".xml")) {
            return true;
        } else {
            promptError("Please select an XML file", "Wrong file type");
            return false;
        }
    }
    
    private void unwarnSave() {
        if(getTitle().startsWith("*"))
            setTitle(getTitle().substring(1));
    }
    
    protected void warnSave() {
        if(!getTitle().startsWith("*"))
            setTitle("*"+getTitle());
    }
    
    private void confirmBeforeClose() {
        if(getTitle().startsWith("*")) {
            int result = confirmation("Exit the application ?\nAll unsaved changes will be discarded.", "Exit");
            if(result == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        } else {
            System.exit(0);
        }
    }
    
    // <editor-fold defaultstate="collapsed" desc="Variable declarations">  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddAction;
    private javax.swing.JButton btnAddObject;
    private javax.swing.JButton btnAddObservation;
    private javax.swing.JButton btnAddPost;
    private javax.swing.JButton btnAddPre;
    private javax.swing.JButton btnAddProp;
    private javax.swing.JButton btnAddValue;
    private javax.swing.JButton btnRemAction;
    private javax.swing.JButton btnRemObject;
    private javax.swing.JButton btnRemObservation;
    private javax.swing.JButton btnRemPost;
    private javax.swing.JButton btnRemPre;
    private javax.swing.JButton btnRemProperty;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JList<Action> listActions;
    private javax.swing.JList<String> listProperties;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuWorld;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miOpen;
    private javax.swing.JMenuItem miSave;
    private javax.swing.JMenuItem miSaveAs;
    private javax.swing.JPanel panelActions;
    private javax.swing.JPanel panelBtnActions;
    private javax.swing.JPanel panelBtnObjects;
    private javax.swing.JPanel panelBtnObservation;
    private javax.swing.JPanel panelBtnPost;
    private javax.swing.JPanel panelBtnPre;
    private javax.swing.JPanel panelBtnStates;
    private javax.swing.JPanel panelLaws;
    private javax.swing.JPanel panelObjects;
    private javax.swing.JPanel panelObservation;
    private javax.swing.JPanel panelObservations;
    private javax.swing.JPanel panelPost;
    private javax.swing.JPanel panelPre;
    private javax.swing.JPanel panelStates;
    private javax.swing.JScrollPane scrollListActions;
    private javax.swing.JScrollPane scrollListProp;
    private javax.swing.JScrollPane scrollPaneObjects;
    private javax.swing.JScrollPane scrollTableObservation;
    private javax.swing.JScrollPane scrollTablePost;
    private javax.swing.JScrollPane scrollTablePre;
    private javax.swing.JSlider sliderInstant;
    private javax.swing.JSplitPane splitActionTab;
    private javax.swing.JSplitPane splitTabObjects;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable tableObservation;
    private javax.swing.JTable tablePostCond;
    private javax.swing.JTable tablePreCond;
    private javax.swing.JTree treeObjects;
    // End of variables declaration//GEN-END:variables

    // </editor-fold> 
}
