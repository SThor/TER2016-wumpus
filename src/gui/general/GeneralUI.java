package gui.general;

import gui.general.componentModels.ConditionTableModel;
import gui.general.componentModels.SysObjectTreeModel;
import gui.general.componentModels.WorldListModel;
import java.awt.event.KeyEvent;
import model.importexport.WorldExport;
import model.importexport.WorldImport;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.List;
import javax.swing.DefaultBoundedRangeModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.PlainDocument;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import model.Action;
import model.Condition;
import model.ObjectProperty;
import model.SysObject;
import model.UniqueList;
import model.World;
import model.exceptions.DuplicateElementException;
import model.observations.Scenario;
import org.jdom2.JDOMException;

/**
 *
 * @author Paul Givel and Guillaume Hartenstein
 */
public class GeneralUI extends javax.swing.JFrame {
    private SysObject _object;
    private ObjectProperty _property;
    private String _propValue;
    private Action _action;
    private Condition _preCond;
    private Condition _postCond;
                            
    private World world;
    private final ScenarioModel scenario;
    
    private File worldFile;
    private File scenarioFile;
    private boolean worldSaved;
    private boolean scenarioSaved;
    
    private final JFileChooser xmlChooser;
    
    private final ConditionTableModel preCondTableModel;
    private final ConditionTableModel postCondTableModel;
    private final SysObjectTreeModel objectTreeModel;
    private final WorldListModel<String> propValueListModel;
    private final WorldListModel<Action> actionListModel;
    
    /**
     * Creates new form GeneralUI
     * @param world The world to work on
     * @param scenario The scenario to work on
     */
    public GeneralUI(World world, Scenario scenario) {
        this.world = world;
        this.scenario = new ScenarioModel(scenario, this, world);
   
        xmlChooser = new JFileChooser();
        xmlChooser.setFileFilter(new FileNameExtensionFilter("XML files", "xml"));
        
        worldSaved = false;
        scenarioSaved = false;
        
        preCondTableModel = new ConditionTableModel(new UniqueList<Condition>());
        postCondTableModel = new ConditionTableModel((new UniqueList<Condition>()));
        objectTreeModel = new SysObjectTreeModel(world);
        propValueListModel = new WorldListModel<>(new UniqueList<String>());
        actionListModel = new WorldListModel<>(world.getPossibleActions());
        
        initComponents();
        
        sliderInstant.setLabelTable(sliderInstant.createStandardLabels(1));
        
        treeObjects.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        
        tablePreCond.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                tablePreCondValueChanged(e);
            }
        });
        
        tablePostCond.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                tablePostCondValueChanged(e);
            }
        });
        
        epXmlScenario.getDocument().addDocumentListener(new XmlEditorListener());
        epXmlScenario.getDocument().putProperty(PlainDocument.tabSizeAttribute, 1);
        
        super.setLocationRelativeTo(null);
        setTitle();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        splitObjectsTab = new javax.swing.JSplitPane();
        panelStates = new javax.swing.JPanel();
        scrollListProp = new javax.swing.JScrollPane();
        listPropValue = new javax.swing.JList<>();
        panelBtnStates = new javax.swing.JPanel();
        btnAddValue = new javax.swing.JButton();
        btnRemProperty = new javax.swing.JButton();
        panelObjects = new javax.swing.JPanel();
        scrollPaneObjects = new javax.swing.JScrollPane();
        treeObjects = new javax.swing.JTree();
        panelBtnObjects = new javax.swing.JPanel();
        btnAddObject = new javax.swing.JButton();
        btnAddProp = new javax.swing.JButton();
        btnRemObject = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        splitActionTab = new javax.swing.JSplitPane();
        panelLaws = new javax.swing.JPanel();
        panelPre = new javax.swing.JPanel();
        scrollTablePre = new javax.swing.JScrollPane();
        tablePreCond = new javax.swing.JTable();
        panelBtnPre = new javax.swing.JPanel();
        btnAddPre = new javax.swing.JButton();
        btnRemPre = new javax.swing.JButton();
        panelPost = new javax.swing.JPanel();
        scrollTablePost = new javax.swing.JScrollPane();
        tablePostCond = new javax.swing.JTable();
        panelBtnPost = new javax.swing.JPanel();
        btnAddPost = new javax.swing.JButton();
        btnRemPost = new javax.swing.JButton();
        panelActions = new javax.swing.JPanel();
        scrollListActions = new javax.swing.JScrollPane();
        listActions = new javax.swing.JList<>();
        panelBtnActions = new javax.swing.JPanel();
        btnAddAction = new javax.swing.JButton();
        btnRemAction = new javax.swing.JButton();
        panelScenarioTab = new javax.swing.JPanel();
        splitXmlFormula = new javax.swing.JSplitPane();
        scrollFormulaArea = new javax.swing.JScrollPane();
        taFormula = new javax.swing.JTextArea();
        scrollEditorPane = new javax.swing.JScrollPane();
        epXmlScenario = new javax.swing.JEditorPane();
        panelInstant = new javax.swing.JPanel();
        panelBtnInstant = new javax.swing.JPanel();
        btnAddInstantAfter = new javax.swing.JButton();
        btnAddInstantBefore = new javax.swing.JButton();
        btnMoveInstantAfter = new javax.swing.JButton();
        btnMoveInstantBefore = new javax.swing.JButton();
        btnRemInstant = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        menuWorld = new javax.swing.JMenu();
        miOpenWorld = new javax.swing.JMenuItem();
        miSaveWorld = new javax.swing.JMenuItem();
        miSaveWorldAs = new javax.swing.JMenuItem();
        menuScenario = new javax.swing.JMenu();
        miOpenScenario = new javax.swing.JMenuItem();
        miSaveScenario = new javax.swing.JMenuItem();
        miSaveScenarioAs = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        splitObjectsTab.setDividerLocation(270);

        panelStates.setLayout(new java.awt.BorderLayout());

        listPropValue.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Possible values", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16))); // NOI18N
        listPropValue.setModel(propValueListModel);
        listPropValue.setOpaque(false);
        listPropValue.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listPropValueValueChanged(evt);
            }
        });
        scrollListProp.setViewportView(listPropValue);

        panelStates.add(scrollListProp, java.awt.BorderLayout.CENTER);

        btnAddValue.setText("Add");
        btnAddValue.setEnabled(false);
        btnAddValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddValueActionPerformed(evt);
            }
        });
        panelBtnStates.add(btnAddValue);

        btnRemProperty.setText("Remove");
        btnRemProperty.setEnabled(false);
        btnRemProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemPropertyActionPerformed(evt);
            }
        });
        panelBtnStates.add(btnRemProperty);

        panelStates.add(panelBtnStates, java.awt.BorderLayout.PAGE_END);

        splitObjectsTab.setRightComponent(panelStates);

        panelObjects.setLayout(new java.awt.BorderLayout());

        treeObjects.setModel(objectTreeModel);
        treeObjects.setOpaque(false);
        treeObjects.setRootVisible(false);
        treeObjects.setShowsRootHandles(true);
        treeObjects.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeObjectsValueChanged(evt);
            }
        });
        scrollPaneObjects.setViewportView(treeObjects);

        panelObjects.add(scrollPaneObjects, java.awt.BorderLayout.CENTER);

        btnAddObject.setText("Add object");
        btnAddObject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddObjectActionPerformed(evt);
            }
        });
        panelBtnObjects.add(btnAddObject);

        btnAddProp.setText("Add property");
        btnAddProp.setEnabled(false);
        btnAddProp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPropActionPerformed(evt);
            }
        });
        panelBtnObjects.add(btnAddProp);

        btnRemObject.setText("Remove");
        btnRemObject.setEnabled(false);
        btnRemObject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemObjectActionPerformed(evt);
            }
        });
        panelBtnObjects.add(btnRemObject);

        panelObjects.add(panelBtnObjects, java.awt.BorderLayout.PAGE_END);
        panelObjects.add(jSeparator1, java.awt.BorderLayout.PAGE_START);

        splitObjectsTab.setLeftComponent(panelObjects);

        tabbedPane.addTab("Objects", splitObjectsTab);

        splitActionTab.setDividerLocation(150);

        panelLaws.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Action laws", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16))); // NOI18N
        panelLaws.setLayout(new java.awt.GridLayout(2, 1));

        panelPre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pre-conditions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        panelPre.setLayout(new java.awt.BorderLayout());

        tablePreCond.setModel(preCondTableModel);
        tablePreCond.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablePreCond.getTableHeader().setReorderingAllowed(false);
        scrollTablePre.setViewportView(tablePreCond);

        panelPre.add(scrollTablePre, java.awt.BorderLayout.CENTER);

        btnAddPre.setText("Add");
        btnAddPre.setEnabled(false);
        btnAddPre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPreActionPerformed(evt);
            }
        });
        panelBtnPre.add(btnAddPre);

        btnRemPre.setText("Remove");
        btnRemPre.setEnabled(false);
        btnRemPre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemPreActionPerformed(evt);
            }
        });
        panelBtnPre.add(btnRemPre);

        panelPre.add(panelBtnPre, java.awt.BorderLayout.SOUTH);

        panelLaws.add(panelPre);

        panelPost.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Post-conditions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        panelPost.setLayout(new java.awt.BorderLayout());

        tablePostCond.setModel(postCondTableModel);
        tablePostCond.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablePostCond.getTableHeader().setReorderingAllowed(false);
        scrollTablePost.setViewportView(tablePostCond);

        panelPost.add(scrollTablePost, java.awt.BorderLayout.CENTER);

        btnAddPost.setText("Add");
        btnAddPost.setEnabled(false);
        btnAddPost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPostActionPerformed(evt);
            }
        });
        panelBtnPost.add(btnAddPost);

        btnRemPost.setText("Remove");
        btnRemPost.setEnabled(false);
        btnRemPost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemPostActionPerformed(evt);
            }
        });
        panelBtnPost.add(btnRemPost);

        panelPost.add(panelBtnPost, java.awt.BorderLayout.SOUTH);

        panelLaws.add(panelPost);

        splitActionTab.setRightComponent(panelLaws);

        panelActions.setLayout(new java.awt.BorderLayout());

        listActions.setModel(actionListModel);
        listActions.setOpaque(false);
        listActions.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listActionsValueChanged(evt);
            }
        });
        scrollListActions.setViewportView(listActions);

        panelActions.add(scrollListActions, java.awt.BorderLayout.CENTER);

        btnAddAction.setText("Add");
        btnAddAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionActionPerformed(evt);
            }
        });
        panelBtnActions.add(btnAddAction);

        btnRemAction.setText("Remove");
        btnRemAction.setEnabled(false);
        btnRemAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemActionActionPerformed(evt);
            }
        });
        panelBtnActions.add(btnRemAction);

        panelActions.add(panelBtnActions, java.awt.BorderLayout.PAGE_END);

        splitActionTab.setLeftComponent(panelActions);

        tabbedPane.addTab("Actions", splitActionTab);

        panelScenarioTab.setLayout(new java.awt.BorderLayout());

        splitXmlFormula.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        taFormula.setEditable(false);
        taFormula.setColumns(20);
        taFormula.setRows(5);
        taFormula.setText(scenario.getFormula());
        taFormula.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Formula", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        taFormula.setOpaque(false);
        scrollFormulaArea.setViewportView(taFormula);

        splitXmlFormula.setTopComponent(scrollFormulaArea);

        epXmlScenario.setText(scenario.getXML());
        epXmlScenario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                epXmlScenarioKeyPressed(evt);
            }
        });
        scrollEditorPane.setViewportView(epXmlScenario);

        splitXmlFormula.setRightComponent(scrollEditorPane);

        panelScenarioTab.add(splitXmlFormula, java.awt.BorderLayout.CENTER);

        panelInstant.setLayout(new java.awt.BorderLayout());

        sliderInstant.setMaximum(0);
        sliderInstant.setPaintLabels(true);
        sliderInstant.setPaintTicks(true);
        sliderInstant.setSnapToTicks(true);
        sliderInstant.setModel(new DefaultBoundedRangeModel(
            0,
            0,
            0,
            scenario.getMaxInstant())
    );
    sliderInstant.addChangeListener(new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            sliderInstantStateChanged(evt);
        }
    });
    panelInstant.add(sliderInstant, java.awt.BorderLayout.CENTER);

    btnAddInstantAfter.setText("Add After");
    btnAddInstantAfter.setToolTipText("Add an instant after the current one");
    btnAddInstantAfter.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnAddInstantAfterActionPerformed(evt);
        }
    });
    panelBtnInstant.add(btnAddInstantAfter);

    btnAddInstantBefore.setText("Add Before");
    btnAddInstantBefore.setToolTipText("Add an instant before the current one");
    btnAddInstantBefore.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnAddInstantBeforeActionPerformed(evt);
        }
    });
    panelBtnInstant.add(btnAddInstantBefore);

    btnMoveInstantAfter.setText("Move After");
    btnMoveInstantAfter.setToolTipText("Swap this instant with the next one");
    btnMoveInstantAfter.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnMoveInstantAfterActionPerformed(evt);
        }
    });
    panelBtnInstant.add(btnMoveInstantAfter);

    btnMoveInstantBefore.setText("Move Before");
    btnMoveInstantBefore.setToolTipText("Swap this instant with the previous one");
    btnMoveInstantBefore.setEnabled(false);
    btnMoveInstantBefore.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnMoveInstantBeforeActionPerformed(evt);
        }
    });
    panelBtnInstant.add(btnMoveInstantBefore);

    btnRemInstant.setText("Remove");
    btnRemInstant.setToolTipText("Remove the current instant");
    btnRemInstant.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnRemInstantActionPerformed(evt);
        }
    });
    panelBtnInstant.add(btnRemInstant);

    panelInstant.add(panelBtnInstant, java.awt.BorderLayout.NORTH);

    panelScenarioTab.add(panelInstant, java.awt.BorderLayout.NORTH);

    tabbedPane.addTab("Scenario", panelScenarioTab);

    menuWorld.setMnemonic('F');
    menuWorld.setText("World");
    menuWorld.setToolTipText("");

    miOpenWorld.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
    miOpenWorld.setMnemonic('O');
    miOpenWorld.setText("Open");
    miOpenWorld.setToolTipText("Import from XML file");
    miOpenWorld.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            miOpenWorldActionPerformed(evt);
        }
    });
    menuWorld.add(miOpenWorld);

    miSaveWorld.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
    miSaveWorld.setMnemonic('S');
    miSaveWorld.setText("Save");
    miSaveWorld.setToolTipText("Export to XML file");
    miSaveWorld.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            miSaveWorldActionPerformed(evt);
        }
    });
    menuWorld.add(miSaveWorld);

    miSaveWorldAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
    miSaveWorldAs.setText("Save as");
    miSaveWorldAs.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            miSaveWorldAsActionPerformed(evt);
        }
    });
    menuWorld.add(miSaveWorldAs);

    menuBar.add(menuWorld);

    menuScenario.setMnemonic('F');
    menuScenario.setText("Scenario");
    menuScenario.setToolTipText("");

    miOpenScenario.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
    miOpenScenario.setMnemonic('O');
    miOpenScenario.setText("Open");
    miOpenScenario.setToolTipText("Import from XML file");
    miOpenScenario.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            miOpenScenarioActionPerformed(evt);
        }
    });
    menuScenario.add(miOpenScenario);

    miSaveScenario.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
    miSaveScenario.setMnemonic('S');
    miSaveScenario.setText("Save");
    miSaveScenario.setToolTipText("Export to XML file");
    miSaveScenario.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            miSaveScenarioActionPerformed(evt);
        }
    });
    menuScenario.add(miSaveScenario);

    miSaveScenarioAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
    miSaveScenarioAs.setText("Save as");
    miSaveScenarioAs.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            miSaveScenarioAsActionPerformed(evt);
        }
    });
    menuScenario.add(miSaveScenarioAs);

    menuBar.add(menuScenario);

    setJMenuBar(menuBar);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(tabbedPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listPropValueValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listPropValueValueChanged
        _propValue = listPropValue.getSelectedValue();
        btnRemProperty.setEnabled(_propValue != null);
    }//GEN-LAST:event_listPropValueValueChanged

    private void listActionsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listActionsValueChanged
        _action = listActions.getSelectedValue();
        boolean notNull = _action != null;
        
        if(notNull) {
            preCondTableModel.setData(_action.getPreConditions());
            postCondTableModel.setData(_action.getPostConditions());
        } else {
            preCondTableModel.setData(new UniqueList<Condition>());
            postCondTableModel.setData(new UniqueList<Condition>());
        }
        
        btnAddPre.setEnabled(notNull);
        btnAddPost.setEnabled(notNull);
        btnRemAction.setEnabled(notNull);
    }//GEN-LAST:event_listActionsValueChanged

    private void treeObjectsValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeObjectsValueChanged
        Object selected;
        Object parent;
        
        _propValue = null;
        
        try {
            TreePath path = treeObjects.getSelectionPath();
            selected = path.getLastPathComponent();
            parent = path.getParentPath().getLastPathComponent();
            
            // If true, a SysObject has been selected, else it's an ObjectProperty
            boolean isSysObject = selected instanceof SysObject;
        
            if(isSysObject) {
                _object = (SysObject) selected;
                _property = null;
                propValueListModel.setData(new UniqueList<String>());
            } else {
                _object = (SysObject) parent;
                _property = (ObjectProperty) selected;
                propValueListModel.setData(_property.getPossibleValues());
            }
        
            btnRemObject.setEnabled(true);
            btnAddProp.setEnabled(true);
            btnAddValue.setEnabled(!isSysObject);
            
        } catch(NullPointerException e) { // If caught, nothing is selected in the JTree
            _object = null;
            _property = null;
            propValueListModel.setData(new UniqueList<String>());
            btnRemObject.setEnabled(false);
            btnAddProp.setEnabled(false);
            btnAddValue.setEnabled(false);
        }
    }//GEN-LAST:event_treeObjectsValueChanged

    private void btnRemObjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemObjectActionPerformed
        if(_property != null)
            removeProperty();
        else
            removeObject();
    }//GEN-LAST:event_btnRemObjectActionPerformed

    private void btnRemPropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemPropertyActionPerformed
        String message = "Delete value \""+ _propValue +"\" from property \""+ _property +"\" in object \""+ _object +"\" ?";
        if (confirmation(message, "Confirm deletion")) {
            propValueListModel.removeElement(_propValue);
            warnWorldSave();
        }
    }//GEN-LAST:event_btnRemPropertyActionPerformed

    private void btnRemActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemActionActionPerformed
        String message = "Delete action \""+ _action +"\" from world ?";
        if (confirmation(message, "Confirm deletion")) {
            actionListModel.removeElement(_action);
            warnWorldSave();
        }
    }//GEN-LAST:event_btnRemActionActionPerformed

    private void btnRemPreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemPreActionPerformed
        String message = "Delete selected pre-condition from action \""+ _action +"\" ?";
        if (confirmation(message, "Confirm deletion")) {
            preCondTableModel.removeRow(_preCond);
            warnWorldSave();
        }
    }//GEN-LAST:event_btnRemPreActionPerformed

    private void btnRemPostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemPostActionPerformed
        String message = "Delete selected post-condition from action \""+ _action +"\" ?";
        if (confirmation(message, "Confirm deletion")) {
            postCondTableModel.removeRow(_postCond);
            warnWorldSave();
        }
    }//GEN-LAST:event_btnRemPostActionPerformed
    
    private void removeProperty() {
        String message = "Delete property \""+ _property +"\" from object \""+ _object +"\" ?";
        if (confirmation(message, "Confirm deletion")) {
            objectTreeModel.removeProperty(_object, _property);
            warnWorldSave();
        }
    }

    private void removeObject() {
        String message = "Delete object \""+ _object +"\" from world ?";
        if (confirmation(message, "Confirm deletion")) {
            objectTreeModel.removeObject(_object);
            warnWorldSave();
        }
    }
    
    private void btnAddObjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddObjectActionPerformed
        String name = nameInput("Name of the new object:", "Adding an object");
        if(name != null) {
            try {
                objectTreeModel.addObject(new SysObject(name, world));
                warnWorldSave();
            } catch (DuplicateElementException e) {
                promptError("The object \""+ name +"\" already exists in the world.", 
                            "Cannot create new object");
            }
        }
    }//GEN-LAST:event_btnAddObjectActionPerformed

    private void btnAddPropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPropActionPerformed
        String message = "Name of the new property for object \""+ _object +"\":";
        String name = nameInput(message, "Adding a property");
        if(name != null) {
            try {
                objectTreeModel.addProperty(_object, new ObjectProperty(name));
                warnWorldSave();
            } catch (DuplicateElementException e) {
                promptError("The property \""+ name +"\" already exists in object \""+ _object +"\".", 
                            "Cannot create new property");
            }
        }
    }//GEN-LAST:event_btnAddPropActionPerformed

    private void btnAddValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddValueActionPerformed
        String message = "Name of the new value for property \""+ _property +"\" in object \""+ _object +"\":";
        String name = nameInput(message, "Adding a value");
        if(name != null) {
            try {
                propValueListModel.addElement(name);
                warnWorldSave();
            } catch (DuplicateElementException e) {
                promptError("The value \""+ name +"\" already exists in property \""+ _property +"\" of object \""+ _object +"\".", 
                            "Cannot create new value");
            }
        }
    }//GEN-LAST:event_btnAddValueActionPerformed

    private void btnAddActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionActionPerformed
        String name = nameInput("Name of the new action:", "Adding an action");
        if(name != null) {
            try {
                actionListModel.addElement(new Action(name));
                warnWorldSave();
            } catch (DuplicateElementException e) {
                promptError("The action \""+ name +"\" already exists in the world.", 
                            "Cannot create new action");
            }
        }
    }//GEN-LAST:event_btnAddActionActionPerformed

    private void btnAddPreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPreActionPerformed
        List<SysObject> worldObjects = new UniqueList<>();
        for (int i = 0; i < world.getObjectCount(); i++) {
            worldObjects.add(world.getObjectAt(i));
        }
        //new AddConditionDialog(this, worldObjects, _action.getPreConditions()).setVisible(true);
        //TODO
        preCondTableModel.triggerUpdate();
    }//GEN-LAST:event_btnAddPreActionPerformed

    private void btnAddPostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPostActionPerformed
        List<SysObject> worldObjects = new UniqueList<>();
        for (int i = 0; i < world.getObjectCount(); i++) {
            worldObjects.add(world.getObjectAt(i));
        }
        //new AddConditionDialog(this, worldObjects, _action.getPostConditions()).setVisible(true);
        //TODO
        postCondTableModel.triggerUpdate();
    }//GEN-LAST:event_btnAddPostActionPerformed

    private void miOpenWorldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenWorldActionPerformed
        boolean confirm = true;
        
        if (!worldSaved) {
            confirm = confirmation(
                "Current world will be closed and all unsaved changes will be discarded.\n Continue anyway ?",
                "Open world");
        }
        
        if (confirm) {
            if (worldFile != null) {
                xmlChooser.setCurrentDirectory(worldFile.getParentFile());
            }
            
            if(xmlChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File file = xmlChooser.getSelectedFile();
                if(isXmlFile(file)) {
                    importWorldFromXml(file);
                } else {
                    promptError("Selected file was not an XML file.", "Cannot open file");
                }
            }
        }
    }//GEN-LAST:event_miOpenWorldActionPerformed

    private void miSaveWorldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveWorldActionPerformed
        if(worldFile == null) {
            miSaveWorldAsActionPerformed(null);
        } else {
           exportWorldToXml(worldFile);
        }
    }//GEN-LAST:event_miSaveWorldActionPerformed

    private void miSaveWorldAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveWorldAsActionPerformed
        if(worldFile != null) {
                xmlChooser.setCurrentDirectory(worldFile.getParentFile());
        }
        
        if(xmlChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = xmlChooser.getSelectedFile();
            boolean confirm = true;
            if(file.exists()) {
                if(isXmlFile(file)) {
                    confirm = confirmation(file.getName()+" already exists.\n Override ?", "File already exists");
                } else {
                    promptError(file.getName()+" is not an XML file", "Failed to save file");
                    return;
                }
            } else {
                if(!isXmlFile(file)) {
                    file = new File(file.getAbsolutePath()+".xml");
                }
            }

            if (confirm) {
                exportWorldToXml(file);
            }
        }
    }//GEN-LAST:event_miSaveWorldAsActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        confirmBeforeClose();
    }//GEN-LAST:event_formWindowClosing

    private void miOpenScenarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenScenarioActionPerformed
        boolean confirm = true;
        
        if(!scenarioSaved) {
            confirm = confirmation(
                "Current scenario will be closed and all unsaved changes will be discarded.\n Continue anyway ?",
                "Open scenario");
        }
        
        if(confirm) {
            if(scenarioFile != null) {
                xmlChooser.setCurrentDirectory(scenarioFile.getParentFile());
            }
            
            if(xmlChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File file = xmlChooser.getSelectedFile();
                if(isXmlFile(file)) {
                    openScenarioXml(file);
                } else {
                    promptError("Selected file was not an XML file.", "Cannot open file");
                }
            }
        }
    }//GEN-LAST:event_miOpenScenarioActionPerformed

    private void miSaveScenarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveScenarioActionPerformed
        if(scenarioFile == null) {
            miSaveScenarioAsActionPerformed(null);
        } else {
            saveScenarioXml(scenarioFile);
        }
    }//GEN-LAST:event_miSaveScenarioActionPerformed

    private void miSaveScenarioAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveScenarioAsActionPerformed
        if(scenarioFile != null) {
                xmlChooser.setCurrentDirectory(scenarioFile.getParentFile());
        }
        
        if(xmlChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = xmlChooser.getSelectedFile();
            boolean confirm = true;
            if(file.exists()) {
                if(isXmlFile(file)) {
                    confirm = confirmation(file.getName()+" already exists.\n Override ?", "File already exists");
                } else {
                    promptError(file.getName()+" is not an XML file", "Failed to save file");
                    return;
                }
            } else {
                if(!isXmlFile(file)) {
                    file = new File(file.getAbsolutePath()+".xml");
                }
            }

            if(confirm) {
                saveScenarioXml(file);
            }
        }
    }//GEN-LAST:event_miSaveScenarioAsActionPerformed

    private void sliderInstantStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderInstantStateChanged
        scenario.setInstant(sliderInstant.getValue());
        taFormula.setText(scenario.getFormula());
        epXmlScenario.setText(scenario.getXML());
        btnMoveInstantAfter.setEnabled(scenario.getInstant() < scenario.getMaxInstant());
        btnMoveInstantBefore.setEnabled(scenario.getInstant() > 0);
    }//GEN-LAST:event_sliderInstantStateChanged

    private void btnAddInstantAfterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddInstantAfterActionPerformed
        scenario.addInstantAfterCurrent();
        sliderInstant.setMaximum(sliderInstant.getMaximum()+1);
        sliderInstant.setValue(1);
    }//GEN-LAST:event_btnAddInstantAfterActionPerformed

    private void btnAddInstantBeforeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddInstantBeforeActionPerformed
        scenario.addInstantBeforeCurrent();
        sliderInstant.setMaximum(sliderInstant.getMaximum()+1);
    }//GEN-LAST:event_btnAddInstantBeforeActionPerformed

    private void btnMoveInstantAfterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveInstantAfterActionPerformed
        scenario.swapInstantWithNext();
        sliderInstant.setValue(sliderInstant.getValue()+1);
    }//GEN-LAST:event_btnMoveInstantAfterActionPerformed

    private void btnMoveInstantBeforeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveInstantBeforeActionPerformed
        scenario.swapInstantWithPrevious();
        sliderInstant.setValue(sliderInstant.getValue()-1);
    }//GEN-LAST:event_btnMoveInstantBeforeActionPerformed

    private void btnRemInstantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemInstantActionPerformed
        if (confirmation("Remove instant "+ scenario.getInstant() +" ?", "Deletion confirmation")) {
            scenario.removeInstant();
            sliderInstant.setMaximum(sliderInstant.getMaximum()-1);
        }
    }//GEN-LAST:event_btnRemInstantActionPerformed

    private void epXmlScenarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_epXmlScenarioKeyPressed
        // if CTRL+SPACE -> auto-completion
        if (evt.getModifiers() == KeyEvent.CTRL_MASK && evt.getKeyCode() == KeyEvent.VK_SPACE) {
            Document document = epXmlScenario.getDocument();
            if(document.getLength() >= 4) {
                try {
                    int caretPos = document.createPosition(epXmlScenario.getCaretPosition()).getOffset();
                    String toInsert = null;
                    int lengthToRemove = 0;
                    if(document.getText(caretPos-4, 4).equals("cond")) {
                        lengthToRemove = 4;
                        toInsert = "<condition object=\"\" property=\"\" value=\"\" />";
                    } else if (document.getText(caretPos-3, 3).equals("and")) {
                        lengthToRemove = 3;
                        toInsert = "<operation type=\"and\">\n  \n</operation>";
                    } else if (document.getText(caretPos-2, 2).equals("or")) {
                        lengthToRemove = 2;
                        toInsert = "<operation type=\"or\">\n  \n</operation>";
                    } else if (document.getText(caretPos-3, 3).equals("not")) {
                        lengthToRemove = 3;
                        toInsert = "<operation type=\"not\">\n  \n</operation>";
                    }
                    
                    if(toInsert != null) {
                        caretPos -= lengthToRemove;
                        document.remove(caretPos, lengthToRemove);
                        document.insertString(caretPos, toInsert, null);
                    }
                } catch (BadLocationException ex) {
                    promptError("Auto-completion error", "Error");
                }
            }
        }
    }//GEN-LAST:event_epXmlScenarioKeyPressed

    private void tablePreCondValueChanged(ListSelectionEvent evt) {
        try {
            _preCond = _action.getPreConditions().get(tablePreCond.getSelectedRow());
        } catch (IndexOutOfBoundsException e) {
            _preCond = null;
        }
        btnRemPre.setEnabled(_preCond != null);
    }

    private void tablePostCondValueChanged(ListSelectionEvent evt) {
        try {
            _postCond = _action.getPostConditions().get(tablePostCond.getSelectedRow());
        } catch (IndexOutOfBoundsException e) {
            _postCond = null;
        }
        btnRemPost.setEnabled(_postCond != null);
    }
    
    private void epXmlDocumentTextChanged(DocumentEvent e) {
        scenario.setXML(epXmlScenario.getText());
        warnScenarioSave();
    }
    
    private boolean confirmation(String message, String title) {
        return JOptionPane.showConfirmDialog(this, 
                message, 
                title, 
                JOptionPane.YES_NO_OPTION, 
                JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION;
    }
    
    private String nameInput(String message, String title) {
        String name = JOptionPane.showInputDialog(this, message, title, JOptionPane.QUESTION_MESSAGE);
        if(name != null)
            name = name.trim();
        
        while("".equals(name)) {
            name = JOptionPane.showInputDialog(this, "Please enter a valid name:", title, JOptionPane.ERROR_MESSAGE);
            if(name != null)
                name = name.trim();
        }
        
        return name;
    }
    
    protected void promptError(String message, String title) {
        JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
    }
    
    private void unwarnWorldSave() {
        if(!worldSaved) {
            worldSaved = true;
            setTitle();
        }
    }
    
    protected void warnWorldSave() {
        if(worldSaved) {
            worldSaved = false;
            setTitle();
        }
    }
    
    private void unwarnScenarioSave() {
        if(!scenarioSaved) {
            scenarioSaved = true;
            setTitle();
        }
    }
    
    private void warnScenarioSave() {
        if(scenarioSaved) {
            scenarioSaved = false;
            setTitle();
        }
    }
    
    private void confirmBeforeClose() {
        if(worldSaved && scenarioSaved) {
            System.exit(0);
        } else if(confirmation("Exit the application ?\nAll unsaved changes will be discarded.", "Exit")) {
            System.exit(0);
        }
    }
    
    private boolean isXmlFile(File file) {
        return file.getName().endsWith(".xml");
    }
    
    private void exportWorldToXml(File file) {
        try {
            new WorldExport(world, Paths.get(file.getAbsolutePath())).exportAll();
            worldFile = file;
            unwarnWorldSave();
        } catch (IOException ex) {
            promptError("Failed to write into file "+file.getName(), "Saving error");
        }
    }
    
    private void importWorldFromXml(File file) {
        try {
            world = new WorldImport().importAll(Paths.get(file.getAbsolutePath()));
            worldFile = file;
            unwarnWorldSave();
            objectTreeModel.setData(world);
            propValueListModel.setData(new UniqueList<String>());
            actionListModel.setData(world.getPossibleActions());
            preCondTableModel.setData(new UniqueList<Condition>());
            postCondTableModel.setData(new UniqueList<Condition>());
            tabbedPane.setSelectedIndex(0);
        } catch (IOException ex) {
            promptError("Failed to read file "+file.getName(), "Opening error");
        } catch (JDOMException ex) {
            promptError("Problem with the xml syntax in the file "+file.getName(), "Opening error");
        }
    }
    
    private void saveScenarioXml(File file)  {
        try {
            Files.write(Paths.get(file.getAbsolutePath()), 
                    epXmlScenario.getText().getBytes(), 
                    StandardOpenOption.WRITE);
            scenarioFile = file;
            unwarnScenarioSave();
        } catch (IOException ex) {
            promptError("Error while writing in file "+file.getName(), "Saving error");
        }
    }
    
    private void openScenarioXml(File file) {
        try {
            epXmlScenario.setPage(file.toURI().toURL());
            epXmlScenario.getDocument().addDocumentListener(new XmlEditorListener());
            epXmlScenario.getDocument().putProperty(PlainDocument.tabSizeAttribute, 1);
            scenarioFile = file;
            unwarnScenarioSave();
            tabbedPane.setSelectedIndex(2);
        } catch (IOException ex) {
            promptError("Failed to read file "+file.getName(), "Opening error");
        }
    }
    
    public void setTitle() {
        String worldFileName = worldFile == null ? "" : worldFile.getName();
        String scenarioFileName = scenarioFile == null ? "" : scenarioFile.getName();
        if(!worldSaved){
            worldFileName += " (unsaved)";
        }
        if(!scenarioSaved) {
            scenarioFileName += " (unsaved)";
        }
        
        super.setTitle("Causality solver - World: "+worldFileName+" - Scenario: "+scenarioFileName);
    }
    
    protected synchronized void newFormulaAvailable(int instant) {
        if(scenario.getInstant() == instant) {
            taFormula.setText(scenario.getFormula());
        }
    }
    
    protected synchronized void xmlSyntaxError() {
        taFormula.setText("/!\\ Syntax error in the XML file.");
    }
    
    protected synchronized void xmlValueError(String message) {
        taFormula.setText("/!\\ Error in XML:\n"+message);
    }
    
// <editor-fold defaultstate="collapsed" desc="Variable declarations">  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddAction;
    private javax.swing.JButton btnAddInstantAfter;
    private javax.swing.JButton btnAddInstantBefore;
    private javax.swing.JButton btnAddObject;
    private javax.swing.JButton btnAddPost;
    private javax.swing.JButton btnAddPre;
    private javax.swing.JButton btnAddProp;
    private javax.swing.JButton btnAddValue;
    private javax.swing.JButton btnMoveInstantAfter;
    private javax.swing.JButton btnMoveInstantBefore;
    private javax.swing.JButton btnRemAction;
    private javax.swing.JButton btnRemInstant;
    private javax.swing.JButton btnRemObject;
    private javax.swing.JButton btnRemPost;
    private javax.swing.JButton btnRemPre;
    private javax.swing.JButton btnRemProperty;
    private javax.swing.JEditorPane epXmlScenario;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JList<Action> listActions;
    private javax.swing.JList<String> listPropValue;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuScenario;
    private javax.swing.JMenu menuWorld;
    private javax.swing.JMenuItem miOpenScenario;
    private javax.swing.JMenuItem miOpenWorld;
    private javax.swing.JMenuItem miSaveScenario;
    private javax.swing.JMenuItem miSaveScenarioAs;
    private javax.swing.JMenuItem miSaveWorld;
    private javax.swing.JMenuItem miSaveWorldAs;
    private javax.swing.JPanel panelActions;
    private javax.swing.JPanel panelBtnActions;
    private javax.swing.JPanel panelBtnInstant;
    private javax.swing.JPanel panelBtnObjects;
    private javax.swing.JPanel panelBtnPost;
    private javax.swing.JPanel panelBtnPre;
    private javax.swing.JPanel panelBtnStates;
    private javax.swing.JPanel panelInstant;
    private javax.swing.JPanel panelLaws;
    private javax.swing.JPanel panelObjects;
    private javax.swing.JPanel panelPost;
    private javax.swing.JPanel panelPre;
    private javax.swing.JPanel panelScenarioTab;
    private javax.swing.JPanel panelStates;
    private javax.swing.JScrollPane scrollEditorPane;
    private javax.swing.JScrollPane scrollFormulaArea;
    private javax.swing.JScrollPane scrollListActions;
    private javax.swing.JScrollPane scrollListProp;
    private javax.swing.JScrollPane scrollPaneObjects;
    private javax.swing.JScrollPane scrollTablePost;
    private javax.swing.JScrollPane scrollTablePre;
    private final javax.swing.JSlider sliderInstant = new javax.swing.JSlider();
    private javax.swing.JSplitPane splitActionTab;
    private javax.swing.JSplitPane splitObjectsTab;
    private javax.swing.JSplitPane splitXmlFormula;
    private javax.swing.JTextArea taFormula;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable tablePostCond;
    private javax.swing.JTable tablePreCond;
    private javax.swing.JTree treeObjects;
    // End of variables declaration//GEN-END:variables

    // </editor-fold> 
    
    private class XmlEditorListener implements DocumentListener {
        @Override
        public void insertUpdate(DocumentEvent e) {
            epXmlDocumentTextChanged(e);
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            epXmlDocumentTextChanged(e);
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            // Do nothing
        }
    }
}
